on:
  workflow_dispatch:  # Allows manual触发

jobs:
  download_and_publish:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set timezone to Beijing
      run: |
        sudo timedatectl set-timezone Asia/Shanghai

    - name: Log current datetime in Beijing timezone
      id: beijing_time
      run: |
        echo "Current Beijing time: $(date '+%Y-%m-%d-%H:%M:%S')"
        echo "time=$(date '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_ENV
        echo "date=$(date '+%Y-%m-%d')" >> $GITHUB_ENV

    - name: Download files
      env:
        DOWNLOAD_LINKS: ${{ secrets.DOWNLOAD_LINKS }}
      run: |
        IFS=',' read -ra LINKS <<< "$DOWNLOAD_LINKS"
        MAX_RETRIES=3
        UPDATED_FILES=""
        for link in "${LINKS[@]}"; do
          filename=$(basename "$link" | cut -d '?' -f 1)
          echo "Downloading $filename"
          
          retries=0
          success=false
          
          while [ $retries -lt $MAX_RETRIES ]; do
            curl -o "$filename" "$link"
            
            if [ $? -eq 0 ]; then
              echo "Successfully downloaded $filename"
              UPDATED_FILES="$UPDATED_FILES $filename"
              success=true
              break
            else
              retries=$((retries + 1))
              echo "Failed to download $filename. Retry $retries/$MAX_RETRIES..."
              sleep 2
            fi
          done
          
          if [ "$success" = false ]; then
            echo "Failed to download $filename after $MAX_RETRIES attempts."
            exit 1
          fi
        done
        echo "UPDATED_FILES=$(echo $UPDATED_FILES | xargs)" >> $GITHUB_ENV

    - name: Capture Git Changes for Each File
      id: file_stats
      run: |
        LOG_ENTRIES=""
        TOTAL_ADDED=0
        TOTAL_DELETED=0
        FILE_COUNT=0

        for file in ${{ env.UPDATED_FILES }}; do
          if git diff --quiet "$file"; then
            continue
          fi

          ADDED_LINES=$(git diff --numstat "$file" | awk '{added += $1} END {print added}')
          DELETED_LINES=$(git diff --numstat "$file" | awk '{deleted += $2} END {print deleted}')

          [ -z "$ADDED_LINES" ] && ADDED_LINES=0
          [ -z "$DELETED_LINES" ] && DELETED_LINES=0
          
          if [ "$ADDED_LINES" -ne 0 ] || [ "$DELETED_LINES" -ne 0 ]; then
            LOG_ENTRIES="$LOG_ENTRIES$file | Add: $ADDED_LINES | Del: $DELETED_LINES | \n%0A"
            TOTAL_ADDED=$((TOTAL_ADDED + ADDED_LINES))
            TOTAL_DELETED=$((TOTAL_DELETED + DELETED_LINES))
            FILE_COUNT=$((FILE_COUNT + 1))
          fi
        done

        echo "log_entries=$LOG_ENTRIES" >> $GITHUB_ENV
        echo "total_added=$TOTAL_ADDED" >> $GITHUB_ENV
        echo "total_deleted=$TOTAL_DELETED" >> $GITHUB_ENV
        echo "file_count=$FILE_COUNT" >> $GITHUB_ENV

    - name: Send Notification to Telegram  # 先发送通知到Telegram
      env:
        TELEGRAM_API_TOKEN: ${{ secrets.TELEGRAM_API_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
      run: |
        if [ "${{ env.file_count }}" -eq 0 ]; then
          echo "No files changed. Skipping Telegram notification."
          exit 0
        fi

        # 准备消息
        NEW_LOG_ENTRY="${{ env.time }} | 更新文件: ${{ env.file_count }} | 新增行: ${{ env.total_added }} | 删除行: ${{ env.total_deleted }}%0A%0A${{ env.log_entries }}"

        # 对消息进行URL编码，替换 \n 为 %0A
        ENCODED_NEW_LOG_ENTRY=$(echo "$NEW_LOG_ENTRY" | sed ':a;N;$!ba;s/\n/%0A/g')

        # 进一步编码任何需要的字符
        ENCODED_NEW_LOG_ENTRY=$(echo "$ENCODED_NEW_LOG_ENTRY" | sed 's/&/%26/g' | sed 's/?/%3F/g' | sed 's/=/ %3D/g' | sed 's/ /%20/g')

        # 通过Telegram API发送消息
        curl -s -X POST "https://api.telegram.org/bot${{ env.TELEGRAM_API_TOKEN }}/sendMessage" \
          -d chat_id=${{ env.TELEGRAM_CHAT_ID }} \
          -d text="$ENCODED_NEW_LOG_ENTRY" \
          -d parse_mode=HTML

    - name: Update Log File  # 之后更新日志文件
      run: |
        LOG_FILE="update_log.txt"
        NEW_LOG_ENTRY="${{ env.time }} | Files: ${{ env.file_count }} | Add: ${{ env.total_added }} | Del: ${{ env.total_deleted }}\n\n${{ env.log_entries }}\n------"

        # 创建或更新日志文件
        if [ -f "$LOG_FILE" ]; then
          TEMP_LOG_FILE=$(mktemp)
          grep -v "^Date: ${{ env.date }} " "$LOG_FILE" > "$TEMP_LOG_FILE"
          echo -e "$NEW_LOG_ENTRY" > "$LOG_FILE"
          cat "$TEMP_LOG_FILE" >> "$LOG_FILE"
          rm "$TEMP_LOG_FILE"
        else
          echo -e "$NEW_LOG_ENTRY" > "$LOG_FILE"
        fi
        
        cat "$LOG_FILE"

    - name: Commit changes
      run: |
        git config --global user.name 'github-actions'
        git config --global user.email 'github-actions@github.com'
        git add .
        git commit -m "Update files - $(date '+%Y-%m-%d %H:%M:%S')"
        git push
