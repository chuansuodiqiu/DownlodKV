name: Download and Publish Files

on:
  workflow_dispatch:  # 允许手动触发

jobs:
  download_and_publish:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set timezone to Beijing
      run: |
        sudo timedatectl set-timezone Asia/Shanghai

    - name: Log current datetime in Beijing timezone
      id: beijing_time
      run: |
        echo "Current Beijing time: $(date '+%Y-%m-%d-%H:%M:%S')"
        echo "time=$(date '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_ENV
        echo "date=$(date '+%Y-%m-%d')" >> $GITHUB_ENV

    - name: Download files
      env:
        DOWNLOAD_LINKS: ${{ secrets.DOWNLOAD_LINKS }}
      run: |
        IFS=',' read -ra LINKS <<< "$DOWNLOAD_LINKS"
        MAX_RETRIES=3
        UPDATED_FILES=""
        for link in "${LINKS[@]}"; do
          filename=$(basename "$link" | cut -d '?' -f 1)
          echo "Downloading $filename"
          
          retries=0
          success=false
          
          while [ $retries -lt $MAX_RETRIES ]; do
            curl -o "$filename" "$link"
            
            if [ $? -eq 0 ]; then
              echo "Successfully downloaded $filename"
              UPDATED_FILES="$UPDATED_FILES $filename"
              success=true
              break
            else
              retries=$((retries + 1))
              echo "Failed to download $filename. Retry $retries/$MAX_RETRIES..."
              sleep 2
            fi
          done
          
          if [ "$success" = false ]; then
            echo "Failed to download $filename after $MAX_RETRIES attempts."
            exit 1
          fi
        done
        echo "updated_files=$(echo $UPDATED_FILES | xargs)" >> $GITHUB_ENV

    - name: Capture Git Changes for Each File
      id: file_stats
      run: |
        LOG_ENTRIES=""
        TOTAL_ADDED=0
        TOTAL_DELETED=0
        FILE_COUNT=0

        for file in ${{ env.updated_files }}; do
          ADDED_LINES=$(git diff --cached --numstat "$file" | awk '{added += $1} END {print added}')
          DELETED_LINES=$(git diff --cached --numstat "$file" | awk '{deleted += $2} END {print deleted}')

          # 如果没有新增或删除行，设置为0
          [ -z "$ADDED_LINES" ] && ADDED_LINES=0
          [ -z "$DELETED_LINES" ] && DELETED_LINES=0
          
          # 只添加有变更的文件
          if [ "$ADDED_LINES" -ne 0 ] || [ "$DELETED_LINES" -ne 0 ]; then
            LOG_ENTRIES="$LOG_ENTRIES\nFile: $file\nLines Added: $ADDED_LINES, Lines Deleted: $DELETED_LINES"
            TOTAL_ADDED=$((TOTAL_ADDED + ADDED_LINES))
            TOTAL_DELETED=$((TOTAL_DELETED + DELETED_LINES))
            FILE_COUNT=$((FILE_COUNT + 1))
          fi
        done

        echo "log_entries=$LOG_ENTRIES" >> $GITHUB_ENV
        echo "total_added=$TOTAL_ADDED" >> $GITHUB_ENV
        echo "total_deleted=$TOTAL_DELETED" >> $GITHUB_ENV
        echo "file_count=$FILE_COUNT" >> $GITHUB_ENV

    - name: Update Log File
      run: |
        LOG_FILE="update_log.txt"
        NEW_LOG_ENTRY="Update Time: ${{ env.time }}%0ATotal Files Updated: ${{ env.file_count }}%0ALines Added: ${{ env.total_added }}%0ALines Deleted: ${{ env.total_deleted }}%0A${{ env.log_entries }}%0A---"
        
        # 检查日志文件是否存在，如果存在，则插入到文件头部
        if [ -f "$LOG_FILE" ]; then
          (echo -e "$NEW_LOG_ENTRY" && cat "$LOG_FILE") > tmpfile && mv tmpfile "$LOG_FILE"
        else
          echo -e "$NEW_LOG_ENTRY" > "$LOG_FILE"
        fi
        
        cat "$LOG_FILE"

    - name: Push to Telegram
      env:
        TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
        CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
      run: |
        LOG_FILE="update_log.txt"
        if [ -f "$LOG_FILE" ]; then
          # Read the log file content
          message=$(cat "$LOG_FILE")
          
          # Encode message for URL
          encoded_message=$(echo "$message" | sed -e ':a;N;$!ba;s/\n/%0A/g' -e 's/&/%26/g')
          
          # Send the message to Telegram
          curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage" \
          -d chat_id=${CHAT_ID} \
          -d text="${encoded_message}" \
          -d parse_mode="HTML"
        else
          echo "Log file not found!"
        fi

    - name: Commit changes
      run: |
        git config --global user.name 'github-actions'
        git config --global user.email 'github-actions@github.com'
        git add .
        git commit -m "Update files - $(date '+%Y-%m-%d-%H:%M:%S')"
        git push
